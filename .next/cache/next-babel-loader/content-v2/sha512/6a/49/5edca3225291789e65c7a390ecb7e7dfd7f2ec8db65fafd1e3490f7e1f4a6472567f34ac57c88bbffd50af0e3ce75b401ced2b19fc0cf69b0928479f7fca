{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\subash\\\\Desktop\\\\React\\\\NextJS-Meetup\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetUpDetail from \"../../components/meetups/MeetUpDetail\";\n\nconst MeetUpDetails = props => {\n  return /*#__PURE__*/_jsxDEV(MeetUpDetail, {\n    image: props.meetUpData.image,\n    title: props.meetUpData.title,\n    address: props.meetUpData.address,\n    description: props.meetUpData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://subash12:KcAn5ZoFW2P4lagy@mongodb-user.uvbao.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://subash12:KcAn5ZoFW2P4lagy@mongodb-user.uvbao.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  }).toArray();\n  console.log(meetupId);\n  return {\n    props: {\n      meetUpData: {\n        id: selectedMeetup._id.toString(),\n        image: selectedMeetup.image,\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetUpDetails;","map":{"version":3,"sources":["C:/Users/subash/Desktop/React/NextJS-Meetup/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetUpDetail","MeetUpDetails","props","meetUpData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","console","log","id"],"mappings":";;AAAA,SAASA,WAAT,EAAuBC,QAAvB,QAAuC,SAAvC;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD;;AAWA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,4GADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAACC,IAAAA,GAAG,EAAC;AAAL,GAA3B,EAAoCC,OAApC,EAAtB;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEL,OAAO,CAACM,GAAR,CAAYC,MAAM,KAAK;AAC1BC,MAAAA,MAAM,EAAG;AACLC,QAAAA,QAAQ,EAAEF,MAAM,CAACL,GAAP,CAAWQ,QAAX;AADL;AADiB,KAAL,CAAlB;AAFF,GAAP;AAQD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMd,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,4GADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMc,cAAc,GAAG,MAAMf,iBAAiB,CAACgB,OAAlB,CAA0B;AAACZ,IAAAA,GAAG,EAACjB,QAAQ,CAACwB,QAAD;AAAb,GAA1B,EAAoDN,OAApD,EAA7B;AAEAY,EAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACA,SAAO;AACLrB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACV4B,QAAAA,EAAE,EAAEJ,cAAc,CAACX,GAAf,CAAmBQ,QAAnB,EADM;AAEVpB,QAAAA,KAAK,EAACuB,cAAc,CAACvB,KAFX;AAGVC,QAAAA,KAAK,EAACsB,cAAc,CAACtB,KAHX;AAIVC,QAAAA,OAAO,EAAEqB,cAAc,CAACrB,OAJd;AAKVC,QAAAA,WAAW,EAACoB,cAAc,CAACpB;AALjB;AADP;AADF,GAAP;AAWD;AAED,eAAeN,aAAf","sourcesContent":["import { MongoClient , ObjectId } from \"mongodb\";\r\nimport MeetUpDetail from \"../../components/meetups/MeetUpDetail\";\r\n\r\nconst MeetUpDetails = (props) => {\r\n  return (\r\n    <MeetUpDetail\r\n      image={props.meetUpData.image}\r\n      title={props.meetUpData.title}\r\n      address={props.meetUpData.address}\r\n      description={props.meetUpData.description}\r\n    />\r\n  );\r\n};\r\n\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://subash12:KcAn5ZoFW2P4lagy@mongodb-user.uvbao.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  const meetups = await meetupsCollection.find({}, {_id:1}).toArray()\r\n\r\n  return {\r\n    fallback: false,\r\n    paths: meetups.map(meetup => ({\r\n        params : {\r\n            meetupId: meetup._id.toString()\r\n        }\r\n    }))\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  const meetupId = context.params.meetupId;\r\n\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://subash12:KcAn5ZoFW2P4lagy@mongodb-user.uvbao.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  const selectedMeetup = await meetupsCollection.findOne({_id:ObjectId(meetupId)}).toArray()\r\n\r\n  console.log(meetupId);\r\n  return {\r\n    props: {\r\n      meetUpData: {\r\n        id: selectedMeetup._id.toString(),\r\n        image:selectedMeetup.image,\r\n        title:selectedMeetup.title,\r\n        address: selectedMeetup.address,\r\n        description:selectedMeetup.description,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetUpDetails;\r\n"]},"metadata":{},"sourceType":"module"}